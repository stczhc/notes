
.. only:: html

    .. math::
        \renewenvironment{equation*}
        {\begin{equation}\begin{aligned}}
        {\end{aligned}\end{equation}}
        \renewcommand{\gg}{>\!\!>}
        \renewcommand{\ll}{<\!\!<}
        \newcommand{\I}{\mathrm{i}}
        \newcommand{\D}{\mathrm{d}}
        \renewcommand{\C}{\mathrm{C}}
        \newcommand{\dt}{\frac{\D}{\D t}}
        \newcommand{\E}{\mathrm{e}}
        \renewcommand{\bm}{\boldsymbol}
        \require{mediawiki-texvc}

.. note::
    GKL Chan, et al. JCP 116, 4462 (2002)

高相关计算的多项式算法: 密度泛函重整化群研究
============================================

I. 简介
-------

近些年, 重整化群 (RG) 在物理学的许多领域称为重要的概念. 这个方法的目的, 是为了处理平均场理论不能考虑的关联, 而这本质上和考虑量子化学中超过 HF 近似的关联的问题是一样的. 经过 White 对于密度泛函重整化群 (DMRG), 一个特别适用于数值计算的 RG 方法, 的发展, RG 方法现在是研究低维量子晶格系统可以选择的方法.

在一些有趣的最近的文章中, Fano 等人和 White 等人展示了如何将 DMRG 用到量子化学的哈密顿量. (当这个文章发表了以后, 另一个将 DMRG 应用在量子化学的研究, 和我们有不同的偏重, 也出现了. ) 原则上, 这个方法非常强大, 因为它允许我们以任意精度近似全组态相互作用的解, 用一个合理的花费. 尤其是, 看上去似乎仅仅用 **多项式** 的计算复杂度, 可以达到任意高的精确度. 这和传统量子化学架构形成鲜明对比, 在传统框架中, 类似耦合簇或者组态相互作用 (CI) 的方法的接续激发导致了指数倍更多的计算量和存储. 它也和选择性的组态相互作用不同, 因为它不是 Slater 行列式形式的展开, 而是 **自适应** 多体基组的展开. [在这个论文发表的时候, 对于 DMRG 用于解决一维问题的看法还不明朗. 对高维问题, 所需的键维度理论上需要指数增加. ] 但是, 尽管这个方法有明显的潜力, 在化学问题中它还相对而言没有得到很好的测试. 在引用 6, 7 中研究的系统还不足以理解这个方法的能力和限制, 尤其是和现存的量子化学方法的关系上.

在这个工作中, 我们尝试从细节上理解, 将 DMRG 应用到量子化学的情况. 我们的目标是, 理解算法如何有效的实现, 算法从量子化学的角度如何工作, 它在一系列动态和非动态关联系统中的表现 (从复杂度和精确度而言), 以及它一般的优点和缺点.

在第二节, 在一个简短的对重整化群的想法的介绍之后, 我们介绍我们版本的 DMRG 算法. 尤其是, 我们准备以和通常相比更多的细节来描述算法, 因为我们发现其他地方的对算法的介绍通常非常简略. 我们处理关于高效性的考虑, 算法细节, 例如最优的轨道顺序, 关于这一点我们在别的地方没有看到过.

在第三节的第一部分, 我们以量子化学的概念分析 DMRG. 我们检查如何 DMRG 在波函数中包含 :math:`N` 重激发, 因而对全 CI 进行近似. 我们以一般方式讨论 RG 方法, 平均场理论, 和微扰论的相对价值. 我们也展示为什么我们可以得到一个好的能量 (但不是一个好的波函数) 通过一个多项式复杂度的算法, 例如 DMRG, 通过考虑约化密度矩阵.

在第三节的第二部分, 我们分析 DMRG 的数值表现. 我们从 DMRG 的精度的研究开始. 方法的成功的关键之处在于, 能量相对于全 CI 的收敛速度, 当 DMRG 态的数目 :math:`M` 增加时. 之前被相信, 这个误差随 :math:`M` 以指数速度降低, 如 :math:`\exp -\kappa M`. 作为对比, 这里我们展示收敛速度事实上由 :math:`\exp-\kappa (\ln M)^2` 描述, 而这还是比代数的快 [疑问?? 这里代数的是指? 可能在后文有解释. 后文表示代数的是指多项式的. ] 我们也简略地研究 DMRG 对于系统的关联长度的依赖, 利用 Huckel 模型, 和氢链, 以及它在大型量子化学计算中可能导致的问题. 我们确定了算法的多项式复杂度, 即 :math:`O(M^2k^4 + M^3k^3)`, 其中 :math:`k` 是单粒子轨道的数目.

在第四节, 我们以一系列基准化学问题的计算作为展示, 包括水, 扭曲的乙烯, 和氮气解离, 并将 DMRG 的表现和现存的最好的量子化学方法比较. 在所有情况, 我们得到的结果和 CCSD(T) 相比相当接近. 尽管如此, 我们发现 DMRG 以现在的理论形式对于处理具有大量动态相关的系统 (即有非常大基组) 并不理想, 但是 DMRG 处理非动态关联非常成功.

在第五节, 我们给出结论. 我们将我们的发现放置在量子化学的未来发展中展示, 并讨论如何进一步提高 DMRG 算法本身.

II. 密度矩阵重整化群算法
------------------------

对于具有两个不同的长度和时间尺度的系统, 可以通过平均场理论很好的处理. [这里指波恩奥本海默近似, 将电子和原子核分开考虑. ] 在化学中, 这一点的经典例子是波恩-奥本海默近似, 其中原子核可以被考虑为运动在一个有效场 (势能面) 中. 而势能面由把电子运动 "积分掉" 而得到. [这里的积分掉可以理解为, 原来势能当然应该是电子坐标或波函数的函数, 但是实际上势能面只是原子核坐标的函数. 这相当于在原来势能面的表达式中完成了电子坐标变量的积分, 从而势能面中不出现电子坐标的变量. ]

当这样的长度尺度的分离不存在时, 我们可以利用重整化技术. 即使在关联的微观机制相对而言是短程的, 通过 "多米诺" 效应, 这种情况也可以出现. [这是说, 如果关联是极其短程的, 那么长度尺度的分离就存在了. 但是如果短程的关联通过多米诺效应层层传递形成长程的关联, 也会造成两个尺度的耦合, 从而传统的分离方法会失效. ] 当以这种方式, 阶梯式的涨落导致关联长度发散, 这个系统被称为是 "临界的". 尽管我们关心的大部分量子化学系统不是临界系统 (在第三 A 节会更精确解释这一点), 电子关联在本质上是阶梯式的; 关联只是一对一对的, 但是它通过多米诺效应产生了不可忽略的三粒子或更多粒子的关联.

当在问题的不同尺度之间没有解耦合时, 系统的所有微观自由度都耦合. 在电子相关的上下文, 这对应于非常多数量的不可忽略的 Slater 行列式从高阶激发产生, 而它们对于强关联系统的精确描述是需要的.

重整化是一个过程, 它允许我们去在大尺度上描述系统的热力学性质, 而不显式地考虑所有耦合的自由度. 这是通过 **重整化变换**, 它将在长度尺度 :math:`\lambda` 的对一个系统的描述和在更长长度尺度 :math:`\lambda + \delta\lambda` 的描述, 相联系, 通过积分掉它们之间的自由度. 在每个长度尺度, 用来描述系统的变量以复杂的方式依赖于在某更短长度尺度的变量. 通过一步步积分到更长的长度尺度, 我们可以得到一个对系统的描述, 即使微观变量的数量极其大. 改变长度尺度的过程称为 **分块** (blocking), 而积分掉自由度称为 **截断** (decimation). 每个重整化变换都必须包含一个对于系统的 "结构规则" 的修改 (例如哈密顿量或配分函数), 从而维持感兴趣的物理不变量守恒, 例如电子能量.

A. 实空间重整化和 DMRG
^^^^^^^^^^^^^^^^^^^^^^

重整化算法大致分为两类: 实空间和共轭空间. 我们将不进一步讨论共轭空间的重整化, 尽管它在物理的其他领域非常重要.

实空间重整化变换, 其中 DMRG 是一个例子, 是一个代数变换. 在接下来的描述中, 我们将采用对晶格系统的研究中的一些术语. 在量子化学, "晶格" 实际上就是对轨道 [分子轨道] 的一种线性排序, 而每个轨道占据晶格的一个 **位点** (site). 我们将交替采用轨道和位点的说法, 尽管原则上, 一个位点可以包含更一般的态. 作为一个提示, 下面的描述 **不是** 作为一个对量子化学问题的重整化算法的精确描述 (精确描述在第三 B 节), 而是为了展示分块和截断的基本原理.

考虑一些这样的轨道的晶格: 每个自旋轨道包含 Fock 空间的态的集合, 即 :math:`|vac\rangle, |\phi\rangle`. 这可以图形化地在图 1 中表示, 其中我们将单一位点表示为 :math:`\bullet`, 而许多轨道的组 (或者 **块**) 表示为矩形框. 我们从分为四块 :math:`L,B_L, B_R, R` 的晶格开始考虑. 它们对应的 Fock 空间是 :math:`F_L, F_{B_L}, F_{B_R}, F_R`.

.. tikz::
    \foreach \x in {0,...,13} {
        \fill (\x, 0) circle (0.2);
    }
    \draw (-0.4, -0.4) rectangle ++(3.8, 0.8) node[midway, below, shift={(0, -0.4)}] {$L$};
    \draw[dashed] (3.6, -0.4) rectangle ++(1.8, 0.8) node[midway, below, shift={(0, -0.4)}] {$B_L$};
    \draw[dashed] (5.6, -0.4) rectangle ++(1.8, 0.8) node[midway, below, shift={(0, -0.4)}] {$B_R$};
    \draw (7.6, -0.4) rectangle ++(5.8, 0.8) node[midway, below, shift={(0, -0.4)}] {$R$};

图 1: 标准块构型. 对 :math:`L` 进行分块时将加上 :math:`B_L`, 而 :math:`R` 加上 :math:`B_R`.

我们考虑二次量子化哈密顿量, 对于量子化学系统, 形式如下 [注意其中指标表示自旋轨道]

.. math::
    H = \sum_{ij} t_{ij} a_i^\dagger a_j + \sum_{ijkl} v_{ijkl} a_i^\dagger a_j^\dagger a_k a_l
    :label: c02eq1

对每个块, 我们可以以这种形式写下哈密顿量 :math:`H_L, H_{B_L}, H_{B_R}, H_R`, 其中轨道指标限制为在那个块中的轨道. 对于一个合并的块的哈密顿量, 例如块 :math:`L' = LB_L`, 可以写为

.. math::
    H_{L'} = H_L + H_{B_L} + \sum_{IJ} v_{IJ} I_{B_L} J_L
    :label: c02eq2

其中 :math:`\sum_{IJ}v_{IJ} I_L J_{B_L}`. 更显式地, 我们发现

.. math::
    H_{L'} =&\ H_{B_L} + H_L + \sum_{i\in B_L, j\in L} t_{ij} \big( a_i^\dagger a_j + a^\dagger_j a_i\big)
        + \sum_{i \in B_L, jkl\in L} w_{ijkl} a_i^\dagger a_j^\dagger a_k a_l
        + \sum_{i \in L, jkl \in B_L} w_{ijkl} a_i^\dagger a_j^\dagger a_k a_l \\
        &\ + \sum_{ij \in B_L, kl \in L} v_{ijkl} \big( a_i^\dagger a_j^\dagger a_ka_l
            + a_k^\dagger a_l^\dagger a_i a_j \big)
        + \sum_{ik\in B_L, jl \in L} x_{ijkl} a_i^\dagger a_j^\dagger a_k a_l \\
    w_{ijkl} =&\ v_{ijkl} - v_{jikl} \\
    x_{ijkl} =&\ v_{ijkl} - v_{jikl} - v_{jikl} + v_{jilk} = 2 w_{ijkl}

注意, 相互作用项 :math:`I_{B_L} J_L` 的结构是, 一个算符 [指产生或湮灭算符] 在 :math:`B_L` 而三个在 :math:`L`, 或者两个在 :math:`B_L` 而两个在 :math:`L`, 等等.

现在让我们假设块 :math:`B_L` 和 :math:`L` 分别由多体态组 :math:`\{ b \} \in F_{B_L}, \{ l \} \in F_L` 描述, 并且我们有算符 :math:`H_{B_L}, H_L, I_{B_L}, J_L` 在这个基组的矩阵表示. 那么实空间分块步骤包括构建合并块 :math:`L'` 中算符 :math:`H_{L'}, I_{L'}` 的表示 [这里之所以没有 :math:`J` 什么事, 是因为这个记号本来就是对于无块间相互作用的部分的哈密顿量用 :math:`H` 表示, 剩下的用 :math:`I` 或 :math:`J` 表示. 其中 :math:`J` 只用于标记 :math:`B_L` 位点的相互作用部分哈密顿量. :math:`I` 和单位矩阵没有关系. 当然理论上也要构建单位矩阵的表示. 因此在上面把所有字母 :math:`J` 换成 :math:`I` 都没有问题. 因此只有无相互作用部分和有相互作用部分两部分, 即 :math:`H` 和 :math:`I`. I 可能是 interaction 相互作用的首字母. ] 在张量积空间 :math:`\{ l' \} \in F_{L'} = F_L \otimes F_{B_L}`. 这是通过直积. 例如对于算符 :math:`O_L, O_{B_L}` 为 (参考图 2),

.. math::
    \langle l_1b_1|O_L|l_2b_2\rangle =&\ \langle l_1|\langle b_1|O_L|b_2\rangle l_2\rangle
        =\delta_{b_1b_2}[O_L]_{l_1l_2} p(b_1,O_L) ,\\
    \langle l_1b_1|O_LO_{B_L}|l_2b_2\rangle =&\ \langle l_1|\langle b_1|O_LO_{B_L}|b_2\rangle l_2\rangle
        =[O_L]_{l_1l_2}[O_{B_L}]_{b_1b_2} p(b,O_L).
    :label: c02eq6

[这里 :math:`l_1` 等标记可以认为是 :math:`l` 标记的特殊化. :math:`l` 是一个量子数可以取基组大小范围内的一系列数, 而 :math:`l_1` 特指一个选择的量子数. 而 :math:`\langle l_1b_1|O_L|l_2b_2\rangle` 则表示 :math:`O_L` 这个算符在两个特定态之间的矩阵元. 如果将这个对所有可能的量子数计算, 就得到 :math:`O_L` 的在这个基组的矩阵表示. 现在 :math:`O_L` 下标 :math:`L` 表示它是仅作用于 :math:`L` 块的算符, 因此 :math:`b` 量子数对它没有作用, 因为按照上面的标记 :math:`b` 是位点块 :math:`B_L` 中的态. 因此可以将 :math:`b_1` 和 :math:`O_L` 交换位置, 但 :math:`O_L, b_1` 都可以展开为费米子产生湮灭算符的乘积. 做这样的交换可能会产生一个符号差, 用 :math:`p(b_1, O_L)` 表示, 而 :math:`\delta_{b_1b_2} \equiv \langle b_1|b_2\rangle` 以及 :math:`[O_L]_{l_1l_2} \equiv \langle l_1|O_L|l_2\rangle`. ]

.. tikz::
    \foreach \x in {0,...,5} {
        \fill (\x, 0) circle (0.2);
    }
    \draw (-0.4, -0.4) rectangle ++(3.8, 0.8) node[midway, below left, shift={(0, -0.4)}]
        {$L:|l_1\rangle, |l_2\rangle, |l_3\rangle \cdots $};
    \draw[dashed] (3.6, -0.4) rectangle ++(1.8, 0.8) node[midway, below right, shift={(0, -0.4)}]
        {$B_L: |vac\rangle, |\phi_i\rangle, |\phi_{i+1}\rangle, |\phi_i\phi_{i+1}\rangle $};
    \draw (-0.5, -3) rectangle ++ (1, 1) node[midway, below, shift={(0, -0.4)}] {$a_i \in L$};
    \node at (2, -2.5) {$\otimes$};
    \draw (3, -2.7) rectangle ++ (0.4, 0.4) node[midway, below, shift={(0, -0.4)}] {$a_j \in B_L$};
    \node at (4, -2.5) {$\to$};
    \draw (5, -3.5) rectangle ++ (2, 2) node[midway, below, shift={(0, -0.4)}] {$a_ia_j$};

图 2. 分块. 这里 :math:`L` 由态 :math:`\{ l \}` 张开, 和 :math:`B_L` 合并构成新的块, 给出新的块, 由态 :math:`\{ l \} \otimes \{ b_L \}`. 算符矩阵 (例如 :math:`a_i a_j`) 通过由每个块的算符直积构成.

[这里左上图表示 :math:`L` 由 16 个态展开, 表示为 :math:`l_1, l_2, \cdots, l_{16}`. 注意这里 :math:`l` 的下标和位点无关. 假定尚未进行截断操作. 而 :math:`B_L` 由 4 个态展开. ]

这里 :math:`p` 是一个宇称算符, 给出和操作 :math:`\langle b_1 | O_L \to O_L \langle b_1|` 相关的因子 1 或 -1. [即费米子的反对易性. 而这里一般交换的是反对易子为零的算符. ] 它只依赖于在态 :math:`\langle b_1|` 中的粒子数目 [有多少粒子, 就会展开成多少湮灭算符的乘积和在此处不起作用的真空态], 以及 :math:`O_L` 中的二次量子化算符 [即产生或湮灭算符] 的数目; 例如, 如果态 :math:`\langle b_1|` 包含奇数数目的粒子, 那么 :math:`\langle b_1 | a_i = -a_i \langle b_1|` [注意此处 :math:`a_i` 表示湮灭算符]. 上述第二式允许我们计算块 :math:`L` 和 :math:`B_L` 之间的耦合矩阵元, 由于相互作用是具有 :math:`O_LO_{B_L}` 形式的项的和, 正如 :eq:`c02eq2` 那样.

注意, 为了构建合并的块 :math:`L'` 的算符, 我们不需要任何关于块 :math:`L` 和 :math:`B_L` 中的态的结构的细节. 只需要知道它们的粒子数 (这个信息需要被用来计算 :math:`p`). 相反, 每个块简单描述为它的算符的矩阵表示, 以及态的量子数. [并不需要知道算符所表示基于的基组和原始 Slater 基组是怎么样变换关系. ]

我们不知道态的结构  (例如, 它们以 Slater 行列式的展开式) 可能看起来很奇怪. 但是, 如果我们只问一个问题: 从那些小块构建一个大块的算符我们需要怎样的信息, 我们发现, 不需要显式的波函数的知识, 而是, 只需要相关的算符的矩阵表示, 用来完成 :eq:`c02eq6` 的计算. 例如, 为了构造 :math:`a_i a_j`, 其中 :math:`i \in L, j \in B_L`, 我们取 :math:`a_i` 和 :math:`a_j` 矩阵的直积, **假定我们已经得到这些矩阵以某种方式**. 不考虑具体细节, 这里我们指出为了连续完成分块 :math:`LB_L\to L'`, 我们只需要从某个 :math:`L` **开始**, 而对于这个块所有算符矩阵都可以显式计算, 然后在每个阶段, 我们对于算符矩阵 :math:`B_L` 也显式知道. 然后, 正如图 3 显示的那样, 我们可以达到这一点, 通过做一次 :math:`L` 足够小 (即只包含少数的位点) 的重整化变换, 因此我们可以显式构建 :math:`L` 中所有算符在由 :math:`L` 中所有行列式张开的 Fock 空间. 另外, :math:`B_L` 总是保持很小, 只保持少数态 (例如, 在图 2, :math:`B_L` 包含态 :math:`|vac\rangle, |\phi_i\rangle, |\phi_{i+1}\rangle` 和 :math:`|\phi_i\phi_{i+1}\rangle`), 从而因此我们总可以显式构建 :math:`B_L` 中所有算符.

分块下面是截断过程, 这会减少合并块 :math:`L'` 的自由度, 而同时近似保持物理不变量, 例如哈密顿量的本征谱, 守恒. 显然, 我们希望保留的自由度将依赖于我们在重整化过程之后, 希望研究的现象. 在原始的, 被用来研究低能现象的, 实空间重整化群中, Wilson 提出了对角化 :math:`H_{L'}` 在空间 :math:`F_{L'}`, 然后选择 **最低的** :math:`M` 个块 :math:`L'` 的哈密顿量的本征值, 即 :math:`\{ |\mu\rangle = C_{l'}^\mu |l'\rangle : H_{L'}C_{l'}^\mu = \epsilon_{\mu} C_{l'}^{\mu}, \mu =1,\cdots, M \}`, 作为新的块 :math:`L'` 所用的表象. 结果, 块 :math:`L'` 中的各种算符按照下述变换

.. math::
    O_{L'}^{new} = C^T O_{L'}^{old} C
    :label: c02eq8

其中 :math:`C` 是 :math:`M^2\times M` 的 :math:`H_{L'}` 的最低 :math:`M` 个本征矢的系数矩阵. 上述乘法降低了 :math:`M^2\times M^2` 的矩阵 :math:`O_{L'}^{old}` 为 :math:`M\times M` 矩阵. 这个截断降低了用来描述超块 :math:`L'` 的态的数目, 从 :math:`M^2` 张量积态, 到 :math:`M` 粗取样的态, 这些态和低能现象相关. 然后可以对重整化过程进行迭代, 沿着链, 来产生粗取样表示的整个晶格 (从这个表示, 我们可以, 例如, 得到晶格基态能量的近似). 在每次截断中, 所选择的自由度的数目和系统的尺度是相关的, 这和组态相互作用形成对照, 在那里我们利用 Slater 行列式, 它由单粒子自由度参数化.

但是, 尽管上述的实空间重整化对于量子晶格问题的早期承诺, 一个粗糙的对这个过程的应用通常并不能起作用. 正如在其他许多坐着曾细节讨论的那样, 问题在于截断过程, 系统块 :math:`L'` 的最低能量本征态一般地不是最需要保持的态. 尤其是, 在丢弃的态中可能存在相当程度的和晶格的剩余部分 (即环境) 的相互作用. 因此, 应该选择保持那些态, 这些态以某种方式很好描述系统和环境的重要相互作用.

问题是, :math:`L'` 用来近似整个晶格 :math:`L'R'` 的基态波函数 :math:`\Psi_0` 的最好表象是什么? (见图 4)

* 求解 :math:`H\Psi_0 = \epsilon \Psi_0, \Psi_0 = c_{l'r'} |l'r'\rangle`
* 系统的密度矩阵 :math:`D_{ll'} = \sum_r c_{lr} c_{l'r}`
* 对角化 :math:`DC=\lambda C`: 变换 :math:`O_{L'}^{new} = C^T O^{old}_L C`

图 4. DMRG 截断. 这里 :math:`L'` 是系统块, 而 :math:`R'` 是环境.

:math:`|\Psi\rangle` 应该在晶格的 Hilbert 空间中被近似, 以下述形式 :math:`|\Psi\rangle = \sum c_{l'r'}|l'\rangle|r'\rangle`, 其中 :math:`|l'\rangle \in F_{L'}` 而 :math:`|r'\rangle \in F_{R'}` [?? 这里打字错误, 原文写成了 :math:`F_R`]. 如果我们最小化近似和真实波函数之间的距离, 即 :math:`\langle \Psi-\Psi_0|\Psi-\Psi_0\rangle`, 容易证明 :math:`L'` 的 "最优" 态是投影的密度矩阵 :math:`D_{L'}` 的本征函数 :math:`\theta_i`, 由下式给出

.. math::
    D_{L'} = \operatorname{Tr}_{F_{R'}} |\Psi_0\rangle \langle \Psi_0| = \sum_{r'l'_1l'_2}
        c_{l_1'r'}c_{l'_2r'} |l_1'\rangle \langle l_2'| = \sum_i w_i |\theta_i\rangle\langle \theta_i|
    :label: c02eq9

本征函数 :math:`\theta_i` 构成了一组展开函数, 给出最快的收敛, 在上面的度规的意义上 [指 :math:`\langle \Psi-\Psi_0|\Psi-\Psi_0\rangle`]. 这和自然轨道构成全 CI 的最优展开函数是一个道理.

考虑到这一点, White 和 Noack 提出了下面的修改的截断过程. 在一个分块操作 :math:`LB_L\to L'` 后, 可以进行一个额外的分块, 构成 :math:`L'R'`, 其中我们假定我们已经某种近似的对环境 :math:`R'` 的表示, 即我们有近似算符矩阵 :math:`H_{R'}, I_{R'}`. 然后我们可以构成超块哈密顿量 :math:`H_{L'R'}`, 从它我们可以得到满足任何所需的量子限制条件 (例如总粒子数和自旋量子数限制) 的基态波函数 :math:`\Psi`. 这通过 :eq:`c02eq9` 投影到块 :math:`L'` 的密度矩阵, 然后这个密度矩阵被对角化. 具有 :math:`M` 个最大特征值 :math:`w_i` 的密度矩阵本征函数被选择来构成 :math:`C` 矩阵, 然后 :math:`L'` 的算符通过 :eq:`c02eq8` 变换. 因为 :math:`M` 个保留的本征函数是最优的 (在它们导致最好的 :math:`\Psi` 的近似展开的意义上), 这是截断的最优选择. 正是这个截断形式, 将 DMRG 和其他 RG 算法区分开来.

一个进一步的对重整化算法的改进也由 White 提出. 这包括把接续的重整化变换组织为扫描算法, 如图 5 所示. 在沿着晶格迭代进行重整化变换之后, 我们最终达到晶格的末端, 其中系统块张开整个晶格, 而环境块具有可忽略的大小. 我们称这样的一组变换为一次扫描. 注意, 正如前面提到的那样, 我们从一个系统块开始每次扫描, 这个系统块由足够少的位点展开, 从而它的 Fock 空间 (即, 所有可能的行列式, 对所有粒子数) 可以通过 :math:`M` 个态 **精确表示** [实际上通常是小于 :math:`M` 个态就可以精确表示. ] 在扫描的最后, 扫描的方向反转, 因此 **前次扫描** 的系统块成为环境块, 环境块成为系统块. 以这种方式, 环境和系统的态都可以得到提升, 直到达到自洽态. 这样的自洽态, 作为 :math:`\Psi` 以乘积形式 :math:`\Psi = \sum_{l'r'} c_{l'r'} |l'r'\rangle` 并且态数目等于 :math:`M` (以及给定的晶格的轨道顺序) 的最好表示 [这里的意思是, 由于 :math:`l', r'` 是所选的基组, :math:`c_{l'r'}` 是展开系数. :math:`M` 是基组大小. 这也就相当于说这个波函数是这个基组中的对波函数的最好表示. ] 可以认为是重整化算法的 **不动点**. 当然, 不动点并不总是存在, 在实践中算法算法有时会进入一个有限的圈, 尽管我们已经发现, 能量涨落非常小 (低于收敛阈值), 并且当提升 :math:`M` 时涨落会降低. 注意不动点能量的精度 (即, 自洽决定的 :math:`\Psi` 的能量) 是由在每次变换中保持的态的数量 :math:`M` 决定的, 并且从而当 :math:`M` 提升时提升.

图 5. DMRG 扫描算法. 在前向扫描, 系统块 :math:`L` 每次增长 2 个位点. 在后向扫描, :math:`R` 变为系统块.

采用密度矩阵的本征函数, 和自洽扫描过程的组合的实空间重整化过程, 组成了密度矩阵重整化群 (DMRG) 算法.

B. 电子结构理论的密度矩阵算法
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

DMRG 在量子化学哈密顿量的第一个应用在 Fano 等人的工作中, 它们研究了 Pariser-Parr-Pople 哈密顿量, 在环多烯的应用中. 接下来是 White 等人的有趣文章, 它展示了对于 **从头算** 哈密顿量 DMRG 如何有效地推导. 我们已经实现的算法和引用 6 中的并没有实质上的区别; 但是, 我们将以极大的细节描述我们的算法, 因为这样的表示在别的地方还比较缺少.

正如在之前节讨论的, 重整化算法可以分为两个阶段, 分块和截断. 算法作为一个整体在附录 A 总结为伪代码形式. 现在我们继续给出这些步骤的一个系统的解释.

1. 重整化变换
*************

重整化变换如图 1 所示, 应用在晶格构型 :math:`L\bullet \bullet \bullet \bullet R`. 正如以前那样, :math:`L` 和 :math:`R` 是由 :math:`M` 个态展开的块, 而 :math:`\bullet` 表示单一的自旋轨道或位点, 由态 :math:`|vac\rangle, |\phi\rangle` 展开. 我们再一次强调, 在每个构型, 由每个 :math:`\bullet` 携带的算符矩阵直接就可以知道, 因为它们的结构简单. 最开始两个位点和系统块进行分块 :math:`L \to L \bullet \bullet` 而后面两个则和环境块进行分块 :math:`R \to \bullet \bullet R`. 那么想法就是在截断步骤, 采用扩大的环境 :math:`R' = \bullet \bullet R`. 对于这个块构型, 我们需要做一些评论. 当将 :math:`L` 和一个新的块 [指少数位点的集合] 进行分块, 如果新的块仅由少数位点张开 (从而仅由少数态张开态空间), 这将是有优势的, 因为它可以减少 :eq:`c02eq6` 的操作的复杂度. 通过一些可以精确描述 [这里和仅由少数位点张开的意思是一样的] 的位点 :math:`\bullet \bullet` 来扩增环境态, 并且这些位点 "强相互作用于" 系统块 :math:`L\bullet` (其中 "强相互作用" 是基于假定哈密顿量具有短程本性) 也是有优势的, 因为在我们迭代扫描的开始, 我们的环境块仅仅非常近似. 结果, 这将导致迭代扫描的快速收敛.

将 DMRG 方法应用到量子化学系统的主要困难在于在电子哈密顿量 :eq:`c02eq1` 中有大量的项, 一共有 :math:`k^4` 项, 其中 :math:`k` 是轨道数目. 对每个分块操作, 我们需要块的所有算符 :math:`M\times M` 的矩阵表示, 而这些算符必须被以很多种方式组合 (如 :eq:`c02eq6` 那样), 从而存储和计算复杂度都会很高. 几种优化因此是必要的. 正如被 Xiang 在 DMRG 的动量空间首先描述的, 一个显式的所有 :math:`k^4` 项的考虑是不需要的, 如果我们限制我们的兴趣在期望值, 例如能量. 在这种情况, 许多算符可以收缩, 导致所谓的 **辅助算符**. 对于一个任意的块组合 :math:`AB`, 合并的哈密顿量可能可以以这些互补算符重写, 正如 (同时参考 White 和 Martin)

.. math::
    H_{AB} =&\ H_A + H_B + \Delta_{AB} \\
    \Delta_{AB} =&\ \bigg[ \sum_{i\in A} a_i^\dagger S_i^B
        + \sum_{ij\in A} \big( a_i^\dagger a_j^\dagger P_{ij}^B + a_i^\dagger a_j Q_{ij}^B \big)
        + \sum_{i \in A} a_i^\dagger R_i^B + \sum_{i\in B} a_i^\dagger R_i^A \bigg] + \mathrm{adjoint} \\
    P_{ij}^B =&\ \sum_{kl\in B} v_{ijkl} a_k a_l, \\
    Q_{ij}^B =&\ \sum_{kl\in B} x_{ijkl} a_k^\dagger a_l, \\
    R_i^B =&\ \sum_{jkl\in B} w_{ijkl} a_j^\dagger a_k a_l, \\
    S_i^B =&\ \sum_{j\in B} t_{ij}a_j.

注意分解关于 :math:`A` 和 :math:`B` 不是对称的; 一个块携带了未缩并的算符, 例如 :math:`a_i a_j` (常规算符) 而另一个块仅携带辅助算符, 例如 :math:`P_{ij}` (尽管 :math:`R_i` 由两个块携带). 在图 1 所示的块构型, 每个块 :math:`L` 和 :math:`R` 就需要携带 :math:`O(k^2)` 个算符, 所需的存储是 :math:`O(M^2k^2)`. 分块 :math:`L \bullet \bullet` 的最费时的步骤就是构成辅助算符 :math:`P_{ij}, Q_{ij}`, 其代价是 :math:`O(M^2k^3)`.

更进一步的效率可以达到, 通过采用双指标算符的对称性质, 例如 :math:`a_ia_j = - a_ja_i, Q_{ij} = Q_{ji}^T`, 以及通过将算符存储为稀疏形式. 我们跟踪每个态的 :math:`m_s` 和 :math:`N` 值. 当态因此被分组为粒子数和自旋, 算符显示出块稀疏的结构; 例如, :math:`a_i` 将仅连接粒子数相差为 1 , 并且自旋和位点 :math:`i` 相联系的态. 这导致了稀疏存储从而可以节省空间, 但同时也允许对于每个矩阵块执行机器优化的 BLAS 矩阵操作, 而我们发现这导致一到两个数量级的提升, 在计算和内存复杂度. 最后, 为了进一步节省存储, 我们从不存储所有组合块 :math:`L \bullet \bullet` 的算符. 反而, 当需要这样的算符时, 例如, 在求解整个晶格的基态波函数时, 它们以 "直接方式" 一个一个计算. [!!注意这里和代码中的联系!!]

在执行分块 :math:`L' = L \bullet \bullet` 和 :math:`R' = \bullet \bullet R` 的时候, 下一步是截断 :math:`L'`. 对于这一步, 我们需要超块 :math:`L'R'` 的基态波函数. 因为我们只需要超块的少数态, [指只求解少数最大特征值和特征向量. ] 我们采用迭代的 Davidson 过程, 其中关键步骤是构建 :math:`\bm{v}_{L'R'} = \bm{H}_{L'R'}\bm{c}_{L'R'}`. [这个式子指标严格的写法是 :math:`v_{L_1'R_1'} = \sum_{L_2'R_2'} H_{L_1'R_1'}^{L_2'R_2'}c_{L_2'R_2'}`] :math:`\bm{c}` 的维数是超块 :math:`L'R'` 中的态的数目, 即 :math:`O(16M^2)` (在实践中, 这是一个过高估计, 因为在这一步, 我们仅考虑 :math:`L'R'` 中满足所需的总粒子数和 :math:`m_s` 量子数的量子约束的那些态. ) 因此, 这个矩阵-矢量乘积可能看上去是一个 :math:`O(M^4)` 的操作. 但是, 正如 White 等人所描述的 (引用 6 和 7), 我们利用如下事实, 即 :math:`H` 是由块 :math:`L'` 和块 :math:`R'` 中的算符的乘积组成的, 即 :math:`H = \sum O_{L'} O_{R'}`. 因此, 我们可以对每个 :math:`O_{L'}O_{R'}` 对定义中间量 :math:`U`, 通过结构 (省略了撇号为了简洁)

.. math::
    v_{l_1r_1} =&\ [O_L]_{l_1l_2} [O_R]_{r_1r_2} c_{l_2r_2} \\
    [U]_{l_2r_1} =&\ \sum_{r_2} [O_R]_{r_1r_2} c_{l_2r_2} \\
    v_{l_1r_1} =&\ p \sum_{l_2} [O_L]_{l_1l_2} [U]_{l_2r_1}

[这里原式有诸多指标错误. 这里 :math:`p` 的出现是因为交换了 :math:`c` 中 :math:`l_2` 的部分和 :math:`[O_R]` 的作用顺序. :math:`l_2` 部分本来在 :math:`[O_R]` 右边, 但是需要先构造 :math:`[U]`, 这时等于延迟了 :math:`l_2` 部分的作用到构造 :math:`U` 之后. 整个这一组式子是说, 第一行的式子拆成下面两步进行, 每步复杂度只有 :math:`O(M^3)`. ]

其中 :math:`p` 是一个合适的宇称算符, 按照 :eq:`c02eq6` 的意义. 因为每个算符 :math:`O_{L'}, O_{R'}` 是一个 :math:`M \times M` 矩阵,  以上描述的操作复杂度只有 :math:`O(M^3)`. 因此对每个矩阵-矢量乘积 :math:`H_{L'R'}c_{L'R'}` 而言, 复杂度是 :math:`O(M^3)` 乘以算符对 :math:`O_{L'}O_{R'}` 的数量, 即每个乘法的复杂度是 :math:`O(M^3k^2)`.

可以通过给 Davidson 算法一个好的初始猜测来做进一步的提升. 正如引用 14 提示的, 一个合适的候选者是扫描中的前一个块构型的波函数. 我们有两个接续的块构型 :math:`L_{n-2}^{old} \bullet\bullet\bullet\bullet R_{k-n-2}^{old}` 和 :math:`L_n \bullet\bullet\bullet\bullet R_{k-n-4}`, 其中 :math:`L_n` 表示一个覆盖 :math:`n` 个位点的块 (见图 6). [注意这里 :math:`k` 是总位点数目, 因此由于要空出四个 :math:`\bullet`, :math:`L, R` 的下标之和应该是 :math:`k - 4`. ]

图 6. 波函数变换. 旧波函数在态 :math:`L^{old}` 和 :math:`R^{old}` 和中间的两个态的乘积空间中表示. 在新块构型中的系数是通过将 :math:`L^{old}` 按照 :math:`C_L` 变换, 并将 :math:`R^{old}` 按照 :math:`C_R^{-1}` 变换来联系的.

:math:`L` [不加文字指标即表示 new] 的态是通过 :math:`{L'}^{old}` 的截断得到的 [:math:`{L'}^{old}` 的块是 :math:`L^{old}\bullet\bullet`, 表示在截断前的直积空间. 注意 :math:`L` 和 :math:`R` 是相反的. 这里 :math:`L` 的截断是当前扫描的前一步做的. ] 而 :math:`R^{old}` 的态是通过 :math:`R'` 的截断得到的 [注意 :math:`old` 文字指标变换了位置. 这里 :math:`R` 的截断是前一次扫描做的. 因为 :math:`R` 是环境块, 环境块默认是借用前一扫描步构造的系统块. ] 除此之外, :math:`B_L` 的态和前一次构型 [指 old 构型] 中的 :math:`B_R^{old}` 是一样的. [这些是常规表象的态, 不需要截断或任何变换. ], 因此我们将这些态记为 :math:`\{ b \}`. 旧波函数展开在乘积空间 :math:`\{ {l'}^{old} \otimes \{ b \} \otimes \{ r^{old} \}` 为 [注意这里前面估计的复杂度就是 :math:`O(16M^2)`, 正好解释了旧波函数展开在乘积空间, 而不是截断后的空间. 因为截断总是发生在波函数求解之后. ]

.. math::
    \langle \Psi^{old} | = c_{{l'}^{old} br^{old}} \langle {l'}^{old} br^{old} |,

而新波函数在空间 :math:`\{ l \} \otimes \{ b \} \otimes \{ r' \}` 中展开. 为了将旧波函数 :math:`\Psi^{old}` 变换到新空间的猜测波函数, 我们可以使用相关的变换矩阵 :math:`C_L({L'}^{old} \to L)` 和 :math:`C^{old}_R (R' \to R^{old})`. 这样一个变换并不是严格的 [因为涉及截断] 由于它需要求变换矩阵的逆, 而这不能达到 (由于它不是方阵). 作为替代, 我们使用广义逆,[实际上这个逆似乎还是这个矩阵本身或者转置. 从 MPS 的图上看, 不存在任何取逆的运算. ] 通过奇异值分解计算, 然后采用这个意义的逆, 我们得到

.. math::
    \Psi^{guess} =&\ \sum_{lbr'} c_{lbr'}^{guess} \langle l br' |, \\
    c_{lbr'}^{guess} =&\ \sum_{{l'}^{old}r^{old}} [C_L]_{l{l'}^{old}[C^old_R]_{r'r^{old}} c_{{l'}^{old} br^{old}}

采用这样的猜测矢量, 通常只要三或四个 Davidson 迭代来达到所需的阈值, 波函数模残差 :math:`10^{-7}`.

在得到 :math:`\Psi_0` 之后, 我们构造并对角化投影的密度矩阵 :math:`D` [投影是指投影到系统块. ], 通过 :eq:`c02eq9`. 由于下一节将要说明的原因, 有时给密度矩阵添加一个小噪音是有用的. 这可以通过从 :math:`(1-\delta)\Psi + \delta \chi` 来构造密度矩阵来实现, 其中 :math:`\chi` 是一个随机波函数, 而 :math:`\delta` 是一个小数 (例如, :math:`O(10^{-9})`). 采用最低 :math:`M` 个密度矩阵 :math:`D` 的本征矢, :math:`L'` 的算符就可以通过 :eq:`c02eq8` 进行旋转, 复杂度 :math:`O(M^3k^2)`. 然后这些算符 (和波函数和变换矩阵一起) 保存到磁盘从而在下一次扫描迭代或者重整化变换中可以使用.

总之, 重整化变换的最昂贵部分是分块, Davidson 对角化, 和截断步骤, 它们的复杂度分别是 :math:`O(M^2k^3), O(M^3k^2), O(M^3k^2)`. 所有这些操作都可以轻易以共享内存的结构并行, 通过给每个处理器分配与一个位点集合相关联的算符的操作. 例如, 如果我们考虑一个算符 :math:`P_{ij}`, 一个给定的处理器可以处理在分块时它的构成, 以及在 Davidson 步骤它和 :math:`a_i^\dagger a_j^\dagger` 的乘法, 以及最终的截断. 当我们的代码这样安排的时候, 在 IBM SP2 的一个  4 处理器 SMP 节点的初步测试显示了非常好的加速. 当然, 在分布式结构的大规模并行需要更细致的数据交流的考虑, 尤其是在分块步骤, 这样的算法将在别处讨论.

2. 扫描算法
***********

接续的重整化变换组织为自洽的扫描算法, 正如在第 IIA 节讨论的. DMRG 的本质, 正如在后面将以更多细节解释的, 是使得计算的精确度依赖于晶格中轨道的选择和排序. 在我们的工作中, 我们使用了 Hartree-Fock 轨道, 它提供了一个好的低能起始点, 由于 :math:`M=1` 的 DMRG 计算将会重现 HF 能量. [如果指定对称性, 那么每个 MPS 就只能放一个特定态, 那么在一开始选择把粒子放到哪些 HF 轨道就相当于对粒子数量子数和 :math:`M` 的分配的做了选择] 我们现在指定轨道被遍历的顺序. 为了更好的精确度, 我们应该尝试最小化哈密顿量中相互作用的范围, 从而最小化系统的关联尺度. 我们尝试了各种方案, 其中最简单的应该是最小化积分矩阵 :math:`t_{ij}` 的带宽, 通过重排行和列. 我们发现对称逆 Cuthill-McKee (RCM) 重排, 即交换行和列来使得稀疏矩阵更加接近带对角, 一般是令人满意的. 一个单电子积分重排的例子在 图 7 给出.

我们之前指出, 可以从一个小的系统块来开始扫描, 例如, 从 :math:`\circ \circ \bullet\bullet\bullet\bullet R` 开始, 其中 :math:`\circ \circ` 表示系统块. 因此可以构建系统算符的初始构型. 但是, 在初始扫描, 环境态也没有指定, 结果需要某种猜测的态. 我们采用低能 Slater 行列式, 它们和现存的系统态是互补的, 即它们合起来给出正确的总粒子数和 :math:`m_s`. [这只是说明了量子数的分布, 还是没有具体如何初始化 bond 维度的矩阵元. 这句话不是说只选择了一个矩阵元, 而是对每个系统态, 都选择和这个系统态对应的行列式, 因此最终选择了一组行列式, 分别和系统态的每组量子数耦合. ] 这是因为, 如果环境不耦合系统的所有量子数, 某些系统的量子数将会在密度矩阵中出现零权重, 并且最终会在截断中消失. 由于扫描的自洽性, 它们也不会在后面扫描中出现.

作为一个进一步的测量, 关于以这种方式丢失态, 我们在截断的时候给密度矩阵增加了一些噪音, 这确保了每个系统态在密度矩阵中都有非零权重. 应该强调, 除了要求猜测态应该和系统态的量子数相互耦合这个要求外, 它们细致的选择不影响最终 DMRG 算法的收敛答案.

超块 :math:`L\bullet \bullet \bullet \bullet R` 的最低能量在接近扫描中部的地方出现, 尽管其他块构型的能量会很相似. 当我们提到扫描能量, 我们指扫描中所有块构型中的最低能量. 虽然重整化变换并不严格导致每步扫描能量降低, 在实际操作中, 扫描能量平滑地收敛. 慢收敛会成为一个问题, 尤其当轨道数很大而 :math:`M` 很小. 在某些例子, 我们发现几十步迭代对于收敛到几十微 Hartree 是足够的. 这样的收敛问题可以通过晶格中的长波涨落来跟踪, 并且和用迭代方法求解格点上的微分方程是相联系的. 在别处被建议 (例如引用 14) 从小 :math:`M` 开始扫描然后在后续扫描中渐渐增加 :math:`M` 可以减少计算时间. 由于我们的计算时间通常由大 :math:`M` 值进行的许多扫描主导, 我们还没有发现任何这个方案的优势.

最终, 我们发现每个扫描包括 :math:`O(k)` 重整化变换. 因此, 每次扫描的总时间复杂度是 :math:`O(M^2k^4+M^3k^3)` 而内存量 :math:`O(M^2k^2)` 磁盘存储 :math:`O(M^2k^3)`.

3. 性质和对称的评论
*******************

我们如何计算除了总能量以外的性质? 因为我们没有关于态的细致结构, 我们只能计算这些期望值, 当它们可以从我们在每个块存储的算符中构建时. 因此, 如果我们存储直到两体类型的算符, 以 :math:`a_i^\dagger a_j^\dagger a_k a_l` 形式, 那么我们可以以形式 :math:`\sum o_{ijkl} a_i^\dagger a_j^\dagger a_k a_l` 求任何两体算符的期望值. 在上面的算法, 为了效率的原因, 我们从来没有存储四指标的量. 作为替代, 我们只保存了简缩的算符 :math:`P_{ij}, Q_{ij}, R_i, S_i`. 以同样的方式, 我们可以对任何两粒子量构建简缩的算符, 以形式 :math:`\sum_{kl} o_{ijkl} a_i^\dagger a_j^\dagger`, 等. 我们可以跟踪这样的量, 然后以对哈密顿算符同样的方式来对它们分块和截断. 因此我们可以计算直到任何两粒子性质, 而不需要更多额外工作 (即, 不影响多项式复杂度). 核梯度, 只依赖于两粒子密度矩阵, 就可以以这种方式计算.

对于费米子系统, 我们需要跟踪每个态的粒子数, 来计算宇称算符 :math:`p` 在 :eq:`c02eq6`. 但是, 保留更多关于每个态的信息是更好的, 和自旋或者对称性标记相关. 例如, 在上面的算法中, 我们跟踪了 :math:`m_s` 量子数. 也可能, 尽管更复杂, 来利用 :math:`S^2` 对称性和点群对称性. 我们在这里并没有做这些. 但是, 当更多对称性被使用, 算符矩阵就会更加稀疏. 进一步, DMRG 波函数在张量积空间的展开式也更短.

由于哈密顿量和分子的任何对称算符对易, 那么对于足够大的 :math:`M`, 我们的 DMRG 波函数也应该是所有对称性算符的本征态. 因此, 即使没有实际上在态中保留对称性信息, 也不需要担心在晶格波函数中的自旋污染的问题, 只要我们在每个块保留足够多的态.

III. 密度矩阵重整化群的分析
---------------------------

A. 激发结构, 基函数, 和关联
^^^^^^^^^^^^^^^^^^^^^^^^^^^

在量子化学, 通常以电子关联处理的激发结构来分析它. 让我们考虑一个 HF 参考 :math:`|ref\rangle = |\phi_1\phi_2\phi_3\phi_4 \cdots \phi_n \rangle`. 现在以一个系统块开始 :math:`L_1 = \bullet_1`, 并考虑 :math:`\bullet_1 \to \bullet_1 \bullet_2 (L_2)` (为了简单, 每次添加一个位点). 在截断, 我们选择 :math:`L_2 = \bullet_1 \bullet_2` 中最重要的态. 这些态表示重要的激发和激发的组合 (单和双) 从轨道 :math:`\phi_1` 和 :math:`\phi_2` 在 HF 参考态中. 在下一步, 我们添加位点 :math:`\phi_3`, 然后进行进一步的截断. 那么我们的系统中重要的态描述 :math:`L_2` 中最重要的单双激发, 和 :math:`\phi_3` 中的双激发, 以及双和三激发, 作为 :math:`L_2` 和 :math:`\phi_3` 中重要的激发的 **积的组合**. 以这种方式, 重整化过程可以以一种经济的方式, 抓住高多体激发, 相对于显式组态相互作用而言.

这个过程和各种有限空间组态相互作用方案有相似性. 除此之外, 激发的乘积结构引人想到耦合簇理论. 但是, 区别在于把用于表示晶格的 :math:`N` 粒子基组变换到一个更优的 :math:`N` 粒子基组, 在每一步, 而不是采用 Slater 行列式的基组. 每个基组函数是许多 Slater 行列式的复杂混合, 尽管这个表象从来不会是显式的. 因此, 从这个角度, 我们可以把 DMRG 看作是一个进行组态相互作用的方法, 而不需要显式存储任何长 Slater 行列式展开.

可能有人问, 是否可能显式构建 DMRG 基函数的 Slater 行列式展开, 在任何给定的阶段? 答案是可以, 只要我们存储所有变换矩阵 :math:`C`, 它们在截断步骤中被使用. 然后, 我们可以重新跟踪重整化群算法的步骤, 在每一步应用矩阵 :math:`C`, 并跟踪基函数的混合. 因此, 隐式地, 基函数的 Slater 行列式展开就完全包含在变换矩阵的集合中.

在这里, 将常规量子化学关于静态和动态相关的概念和重整化群理论中的想法构建连接是有用的. 粗略说, 通常的量子化学方法是取平均场 (Hartree Fock) 解为起始点, 然后利用低阶微扰或者组态相互作用理论修正它. 这样的修正通常和动态相关相联系, 而由于近简并 (它不能通过微扰论修正) 导致 HF 参考态不适用将导致这些方法出现定性错误. 这些定性错误和静态相关相联系.

RG 方法最开始被认为可以处理平均场理论完全不起作用的情况. 平均场理论中的假设是单粒子和所有其他粒子之间的统计相关是可以求和的; 那么对于足够多的粒子, 大数定律确保了平均场的 "错误" 是高斯分布的. 但是, 如果组分之间的相关并不以足够快的速度衰减, 那么相关就事实上 **不是** 可求和的, 从而平均场理论就会失效.

尽管 "临界性" 其实是一个热力学概念, 在量子化学系统中, 当 HF 参考不好时微扰论的不收敛 (例如在键断开时), 可以看成是一种 "不可求和性" 由于相关的低速衰减 (以微扰论的量级). 在这个意义上, 和临界性相关的是无限相关长度. 临界性也和热力学导数的发散相关. 这也是量子系统的情况; 当存在近简并, 能量只能以很少的量变化, 但是态的占据数非连续地跳跃. 因此, 尽管类比并不完全, 我们可以把 RG 方法看成尤其适用于处理 **静态相关** 问题的方法, 在这些问题中存在重要的大高多体激发 [也就是, 某些激发不能看成微扰, 就是动态相关失效的情况. ] 在后面的小节的我们的一些计算中, 我们将看到这一点.

B. 变分特性
^^^^^^^^^^^

由于 DMRG 简单地限制 Hilbert 空间在 Hamiltonian 求解的空间, 它是变分方法. 但是, 能量并不需要从一个块构型到下一个块构型一直下降, 或者甚至从一个扫描到下一个扫描, 因为不存在在一个扫描中接续的块构型张开的 Hilbert 空间的简单关系. 一个例外是, 当左块和右块都包含 :math:`M` 个态, 例如在块构型 :math:`LB_LR`. 通过这个我们指没有添加额外位点 :math:`B_R` 到环境在截断步骤, 和图 1 不一样. 那么, 由于只有 :math:`M` 环境态, 由 :math:`LB_L` 携带的非零密度矩阵本征值也是 :math:`M`, 因此重整化变换以无损失信息的方式重整化变换 (尽管, 当然在总希尔伯特空间的表示中信息丢失了). 因此, 基态波函数在构型 :math:`LB_LR` 可以被严格表示在接下来的构型 :math:`L'B_{L'}R'`, 因此根据变分定理, 基态能量不能在迭代之间提高.

正如之前提到的, 在实践中, 我们确实观察到扫描能量平滑收敛, 尽管每次扫描的最低能量一般在扫描的中间.

C. DMRG 的计算复杂度
^^^^^^^^^^^^^^^^^^^^

普遍相信获得精确波函数的问题是非常困难的, 指数级复杂. DMRG 在另一方面, 提出了一个多项式时间算法来计算一个任意精确的能量. 这样的说法并不矛盾. 正如之前被 Kohn 非正式地强调的, 好的能量应该仅对应于好的 **约化密度矩阵**, 但可能从不好的波函数得到.

这可以变得更明显, 通过考虑 DMRG 波函数和真实波函数的重叠. 一般地, 如果每个轨道有一个 :math:`O(\epsilon)` 阶的错误, 和波函数的重叠将会指数阶快地变为零, 但是能量的错误只是 :math:`\epsilon` 的多项式级别. 更细致地, 考虑等价位点的晶格, 每个位点携带两个正交态. 现在考虑重整化算法, 我们保持 :math:`M=1`, 并每次添加一个位点. 由于 :math:`M=1`, 那么当做截断 :math:`L \bullet_i \to L'`, 在密度矩阵中舍弃的权重 :math:`\epsilon` 可能完全和由位点 :math:`\bullet_i` 张开的空间的误差相联系. 近似的 :math:`M=1` 波函数, 对于 :math:`k` 位点的晶格, 可以写成乘积形式, 为

.. math::
    \Psi = \prod_n^k \psi_n

由于波函数是乘积形式, 和真实波函数 :math:`\Psi_0` 的重叠矩阵也将是乘积形式, 因此我们得到

.. math::
    \langle \Psi |\Psi_0\rangle \approx \prod_k (l-\epsilon) \Phi \E{-\lambda k},

(其中 :math:`\E^{-\lambda} \sim 1-\epsilon`) [疑问?? 这里没看懂] 即, DMRG 波函数和真实波函数之间的重叠 **指数快** 地降低, 和截断数相比.

在另一方面, 两体密度矩阵, 是四个算符的乘积. 粗略地说, 每个算符都和一个误差 :math:`\epsilon` 相关联, 结果, 每一项 :math:`a_i^\dagger a_j^\dagger a_k a_l` 在两粒子密度矩阵都和误差 :math:`O(1-(1-\epsilon)^4)` 相联系. 结果, 总能量中的误差仅仅

.. math::
    \delta E \approx n(k) (1-(1-\epsilon)^4).

其中 :math:`n(k)` 表示 :math:`v_{ijkl}` 中重要相互作用的数目.

这个误差的多项式界, 如果不考虑 :math:`n(k)` 因子则和 :math:`k` 无关, 是任何每次作用于固定数目的粒子的算符的特征. 当然, 所有热力学算符都是这种形式, 因此这就是重整化群方法的成功.

D. 能量收敛
^^^^^^^^^^^

DMRG 算法的细致数值行为还没有被完全理解. 在早期对算法精确性的 Ising 模型研究, Legaza 和 Fath 演示了能量误差对于给定的 :math:`M`, 大约正比于在截断步骤丢弃权重的和. 更严格地,

.. math::
    |E(M)-E_0| \sim \mathrm{const} \sum_{i > M} w_i + C.

这个线性关系仅仅由于哈密顿量是有界的, 并且因为能量是密度矩阵的线性泛函.

从上式, 我们得知 DMRG 的精确性强烈依赖于密度矩阵本征值 :math:`w_i` 的衰减速率. (见 :eq:`c02eq9`) 当增加指标的时候 [也就是当引入更多态的时候]. 从 (无限秩) 密度矩阵的重整化, 我们可以看到 :math:`w_i` 必须衰减至少比 :math:`1/i` 快, 但是实践中, 衰减率更快, 很可能比任何 :math:`i` 的多项式都快. 这并不奇怪, 因为 :math:`w_i` 是 :math:`\Psi_0` 在最优基组 :math:`\{ \theta \rangle \} \otimes \{ | r' \rangle` 的展开系数, 而对于足够光滑的函数, 在正交基组的展开总是比代数的收敛更快.

在无限系统极限, 远离临界性, 我们可以考虑环境为一个热库, 而子系统的密度矩阵简单地是热密度矩阵 :math:`\propto \E^{-\beta(H-\mu N)}`. 我们最近已经证明, 在较一般的条件 (也参见 Okunishi 等人的关于 Ising 模型的更简单的讨论), 热密度矩阵本征值渐进衰减按照

.. math::
    w_i \sim \mathrm{const} \E^{-\kappa(\ln i)^\alpha}

其中 :math:`\alpha \sim 2`, 而常数 :math:`\kappa` 是和模型有关并和单粒子级别密度成正比.

在图 8, 我们画出了从 neon DZP 计算得到的密度矩阵本征值, 以及从一个水 DZP 计算 (之后描述). 这里我们发现和渐进形式的很好一致. 这验证了上式的一般有效性. 进一步, 从以上两式, 能量误差应该渐进收敛按照

.. math::
    |\delta E| \sim \mathrm{const} \int_M^\infty \E^{-\kappa(\ln i)^2} \D i = \mathrm{const}
        \left( \frac{\E^{-\kappa (\ln M)^2} + \ln M}{\ln M} \right)

两边取对数, 我们发现主导项为

.. math::
    \ln |\delta E| \sim -\kappa (\ln M)^2

在图 9, 11 和 14, 我们发现了相当明显的 :math:`\ln |\delta E|` 和 :math:`(\ln M)^2` 的线性关系, 对于 Huckel 系统, 氢链 (在下节描述) 和水分子 (在第 IV.A 节描述) 的计算. 我们发现了类似的关系在我们的其他计算. 尤其是, 我们的能量拟合上式, 远好于 White 等在别处提出的 :math:`\ln |\delta E| \sim \mathrm{const} M` 形式.
